[{"id":"8c1022cabd91a37952212dad2c11d30e","title":"Git上手指北","content":"Git上手指北1. 什么是Git？Git是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。Git与常用的版本控制工具CVS、Subversion等不同，它采用了分布式版本库的方式，不必服务器端支持。\n2. 为什么要使用Git？\n版本控制：Git可以帮助你管理代码的历史记录，让你能清晰地看到每一次更新的内容。\n团队协作：Git可以让多人协作开发一个项目，每个人都可以提交更新，并拉取同步其他人的更新。\n代码分享：Git可以让你分享你的代码，让其他人可以看到你的成果，并帮助你发现Bug。\n代码备份：Git可以帮助你备份你的代码，避免意外丢失或者不可挽回的误操作。\n\nGit已成为目前最流行的版本控制工具，是开发者必备的技能。\n3. Git的安装Git的安装非常简单，只需要到Git官网下载安装包，然后根据提示一步步安装就可以了。\n4. Git的基本使用Git的基本使用包括配置、初始化、添加、提交、状态查看、日志查看、撤销、分支管理、合并等。下面我们来一一介绍。\n4.1 配置Git的配置有若干选项，其中最必要的是用户名和邮箱的设置（之后您的每一次提交将使用这些信息），请您打开命令行或Git Bash输入以下命令进行配置。\n12git config --global user.name \"your name\"git config --global user.email \"your email\"\n\n更多配置选项请参考Git官方文档。\n4.2 初始化Git的初始化包括在工作目录下创建一个新的Git仓库，或者克隆一个已有的仓库。\n1git init\n\n4.3 添加Git的添加包括将文件添加到暂存区以及将暂存区的文件提交到本地仓库。\n12git add file1 file2...git commit -m \"commit message\"\n\n4.4 状态查看Git的状态查看包括查看当前文件状态、查看暂存区状态、查看本地仓库状态。\n123git statusgit status -sgit status --short\n\n4.5 日志查看Git的日志查看包括查看提交历史、查看文件修改历史。\n123git loggit log --onelinegit log --graph\n\n4.6 撤销Git的撤销包括撤销工作区的修改、撤销暂存区的修改、撤销本地仓库的修改。\n123git checkout -- file1 file2...git reset HEAD file1 file2...git reset --hard HEAD^\n\n4.7 分支管理Git的分支管理包括创建分支、切换分支、合并分支、删除分支。\n1234git branch branch-namegit checkout branch-namegit merge branch-namegit branch -d branch-name\n\n4.8 合并Git的合并包括合并两个分支、合并指定分支到当前分支。\n12git merge branch-namegit rebase branch-name\n\n5. Git与GitHubGitHub是目前最大的Git代码托管平台，是Git的最大用户，也是Git最常见的应用场景。Git与GitHub的结合可以让你在线管理你的代码，并与他人分享你的成果。下面我们来介绍如何使用GitHub。\n5.1 注册GitHub账号首先，你需要注册一个GitHub账号。\n5.2 创建仓库登录GitHub后，点击右上角的“+”按钮，选择“New repository”创建仓库。\nPS. repository的英文意思是仓库。\n5.3 克隆仓库克隆仓库包括两种方式：\n\nHTTPS方式：复制仓库的HTTPS地址，使用命令git clone https://github.com/your-username/your-repository.git克隆仓库。\nSSH方式：生成SSH密钥，使用命令ssh-keygen -t rsa -C \"your-email\"生成SSH密钥，然后添加SSH密钥到GitHub，使用命令git clone git@github.com:your-username/your-repository.git克隆仓库。\n\n5.4 推送代码推送代码包括将本地仓库的修改推送到远程仓库，使用命令git push origin master推送代码。\n5.5 创建分支创建分支包括创建新分支、切换分支。\n12git branch new-branchgit checkout new-branch\n\n5.6 提交代码提交代码包括将本地仓库的修改提交到本地仓库，使用命令git commit -m \"commit message\"提交代码。\n注意：git commit命令后面请加上-m选项，否则会进入VIM模式，非常不方便。\n5.7 创建Pull Request创建Pull Request包括创建新的Pull Request、查看Pull Request列表、合并Pull Request。\n\n创建新的Pull Request：点击仓库的“Pull requests”标签，点击“New pull request”按钮，选择“compare across forks”或“compare with head branch”，选择“base: master”、“head: new-branch”、“Reviewers”、“Assignees”、“Labels”、“Projects”、“Milestone”等信息，点击“Create pull request”按钮。\n查看Pull Request列表：点击仓库的“Pull requests”标签，可以看到所有Pull Request的列表。\n合并Pull Request：点击Pull Request的“Merge pull request”按钮，选择“Confirm merge”按钮，完成合并。\n\n6. 其他6.1 “魔法”由于GitHub是外部网站，所以稳定打开需要使用“魔法”，但只是打开梯子后向GitHub通过Git提交代码并不会像打开GitHub网站一样畅通，您需要配置Git相关端口才能实现梯子端口下Git提交代码。\n6.2 插件在VSCode上Git相关的插件有很多，这里向您强烈推荐GitLens这款插件。它的可视化界面可以帮助您便捷地查看代码的历史记录、文件修改历史、提交记录、分支管理、GitHub上Pull Request等常用Git操作。\n如您有使用其他相关插件的经验或者推荐，欢迎在评论区交流分享❤。\n6.3 提交规范为了规范提交信息，建议您遵循以下格式：\n12345&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;&lt;BLANK LINE&gt;&lt;body&gt;&lt;BLANK LINE&gt;&lt;footer&gt;\n\n\n&lt;type&gt;：用于说明提交的类型，比如feat、fix、docs、style、refactor、test等。\n&lt;scope&gt;：用于说明提交的范围，比如core、cli、ui、api等。\n&lt;subject&gt;：用于简要描述提交的目的。\n&lt;body&gt;：用于详细描述提交的内容。\n&lt;footer&gt;：用于说明与提交相关的注释。\n\n这是 Angular 团队提出的提交规范，供您参考。虽然在实际开发中很难写到这样详尽，但请您至少做到清晰规范，不要使用拼音、乱码或冗长的提交信息，让您后续及其他开发者更容易理解提交的内容。\n7. 总结Git已成为目前最流行的版本控制工具，是开发者必备的技能。Git可以帮助您管理代码的历史记录、团队协作、代码分享、备份等。Git与GitHub的结合可以让您在线管理你的代码，并为与他人合作提供便利。\n希望本文对您有所帮助，祝您学习与生活愉快！😘✨💖\n","slug":"Git上手指北","date":"2025-03-08T13:23:57.000Z","categories_index":"工作","tags_index":"技术,Git,版本控制,GitHub,必备","author_index":"Proselyte"},{"id":"c57ac7e007501b2d3bc006029389c13c","title":"十分钟上手Markdown","content":"十分钟上手MarkdownPS.学习Markdown对您的代码水平没有任何要求，零代码基础也可以轻松上手。\n1. 什么是Markdown？为什么要使用Markdown？\n\n\n\n\n\n\n\n\nMarkdown是一种轻量级标记语言，排版语法简洁，让人们更多地关注内容本身而非排版。它使用易读易写的纯文本格式编写文档，可与HTML混编，可导出 HTML、PDF 以及本身的 .md 格式的文件。因简洁、高效、易读、易写，Markdown被大量使用，如Github、Wikipedia、简书等。\n以上文字摘自Markdown官方教程 markdown.com.cn。\n鉴于高效简洁的Markdown在程序员后续工作中合作场景的广泛应用且其上手容易，建议您花费十分钟时间掌握这门技能，并在日后工作中多使用锻炼，熟能生巧。\n2. Markdown怎么写？Markdown书写于后缀为.md的文件中，语法简单，易于上手，是一种通过引入简单的符号来标记文本的语言。接下来将介绍一些常用的语法，详细及进阶语法请参考官方教程 markdown.com.cn。您可以在VSCode这款强大的编辑器或者Arya等在线编辑器中进行Markdown的编写。\n接下来建议您遵循以下步骤进行操作练习：\n\n安装并打开VSCode编辑器。\n建议您安装Markdown All in One、Markdown Lint以及Markdown Preview Enhanced这三个插件。\n在合适的位置新建一个test.md文件作为练习文件。\n打开test.md文件，右键选择MPE：打开侧边预览预览编辑效果。\n跟随后续教程在编辑器中输入Markdown语法，并对照预览效果进行理解记忆。\n\n2.1 标题标题是Markdown中最重要的语法之一，通过在行首插入1-6个#来表示不同级别的标题，#的数量表示标题的级别。\n123456# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题\n\n2.2 强调通过将文本设置为粗体或斜体来强调其重要性。\n12345*斜体***粗体*****粗体加斜体***\n\n2.3 换行与分段在一行的末尾添加两个或多个空格，然后按回车键,即可创建一个换行(&lt;br&gt;)。注意：markdown中可以使用HTML中的&lt;br&gt;标签来实现换行。\n12这是第一行。  这是第二行。\n\n在Markdown中，分段是通过空白行来实现的。注意：不要用空格（spaces）或制表符（ tabs）缩进段落！\n123段落1段落2\n\n2.4 分隔线分隔线可以通过三个或三个以上的星号、减号、下划线来实现。\n123---***___\n\n2.5 列表无序列表ul通过星号、加号或减号来实现，有序列表ol则通过数字加句点来实现。\n123456* 第一项* 第二项* 第三项1. 第一项2. 第二项3. 第三项\n\n2.6 引用与代码引用通过在段落前面添加&gt;符号来实现。\n1&gt; 这是一个引用。\n\n要将单词或短语表示为代码，请将其包裹在反引号 (`) 中。如果你要表示为代码的单词或短语中包含一个或多个反引号，则可以通过将单词或短语包裹在双反引号(``)中。\n123Use `code` in your Markdown file.``Use `code` in your Markdown file.``\n\n代码块的引入需要在代码前后分别添加三个反引号（```），可以声明其语言类型。注意：下面代码示例中每行去掉前面的反斜杠\\后为实际语法。\n123\\``` python\\print(\"Hello, World!\")\\```\n\n2.7 链接与图片链接通过方括号[]和圆括号()来实现。而图片的引入类似链接，只需在链接前加上!，并在方括号中添加图片的alt和title属性。\n123[链接名称](链接地址)![图片alt](图片链接 \"图片title\")\n\n3. 总结Markdown是一种简单易用的标记语言，高效、简洁、易读、易写，是程序员和写作爱好者的必备技能。以上介绍了Markdown的标题、强调、换行、分段、分隔线、列表、引用、代码、链接、图片等语法，希望能帮助您快速上手。转义字符、内嵌HTML等较复杂语法及详细语法请参考官方教程 markdown.com.cn。\n希望本文对您有所帮助，祝您学习与生活愉快！😘✨💖\n","slug":"十分钟上手Markdown","date":"2025-03-07T08:12:00.000Z","categories_index":"工作","tags_index":"技术,教程,Markdown","author_index":"Proselyte"},{"id":"3324aff7d1b50911304aa0367fc3a2fa","title":"初创博客所感","content":"从大学想到性格又想到WEB还有未来的发展最后扣题想了博客，瞎扯了很多。愿我能将这份热情与感慨留得久一点，跟随自我，不负初心……\n\n虽然实际建站（搭建+配置主题+部署）花费的时间很短（在AI的帮助下大概只用了不到两个小时？），但是考虑有自己的博客的想法还是很早很早就有了的。现在回想起来，大学那种很普遍的迷茫感与焦虑感或许是一直阻碍那个想法变成现实的最大敌人。\n从迈进大一的那一刻，我脑海中还记得之前被灌输的那种思想——就是一定要把目标定的高远。高中时，无论成绩怎样，目标永远是清北；大学了，还没上课，目标就想着保研，却连研究生是什么、要干什么、适不适合我的发展都一点也不知道（有点可笑）。诚然，这种想法的方向没什么大问题，如果一个人的目标一直很低、一直囿于现状，那他/她至少不会过得更好。\n但是我不觉得这种思想多么适合我。虽然我是一个满脑子想法、渴望自由、不喜欢被约束的人，但我也是一个有野心、更渴望通过自己的成就赢得他人认可的人。我确实有一点拖延症，但是每次都一定会提前一会把事情做好，我并不需要一个高远的目标如同达摩克里斯之剑一样悬在我的头顶，反倒是它的寒光让我目眩。我也确实因为它而时常陷入内耗与焦虑的漩涡之中。\n现在是大二下学期刚开始，如果让我总结这一年半的收获，那大概是：\n\n还算可以地听了课，打好了编程基础。\n结交了许多朋友，从学长、学姐那里学到了很多宝贵的经验和方法。\n学会了查找资料、使用AI等自我学习的非常多的方法，自学效率大大提升。\n还有最重要的——不再稀里糊涂地活在过去和当下之间，对未来有了自己的规划和认识，从而不再在内耗和焦虑中迷失。\n\n在OurEDA学习WEB的日子并没有想象中顺利：第一次普通前端三件套Wordle的作业写得不错 -&gt; 学React框架的那次因为备考没时间而抄了同学的（基本没怎么改），被公开处刑，差点就寄了 -&gt; 知耻而后勇，重新补上了落下的内容，自己也加大投入，后面的作业都完成度很高 -&gt; 现在比较有信心用自己的前端技术去实现一些想法。天知道中间那段时间有多难熬。\n从一开始我在Wordle中接触前端的那一刻，我就感觉它好像与我命中注定相关，很难想象一个我梦寐以求如何实现的小游戏的样式在几行代码下就勾勒出来，更让我着迷的的当然还有那些精妙的交互、动画、设计，以及在连通的那一刻收到200响应的感觉，似乎我就是在地球上第一次听到远在月球的阿姆斯特朗的声音的人。因此上手前端对我来说确实就是兴趣使然，但是后来那种急于实践、缺少耐心阅读文档和观看长视频的习惯以及课程压力逐渐让我有些力不从心。我仍记得当初的浏览器开着十几个学习页面，每个页面都看不了几眼又烦躁地去看别的。现在想想，那时大概也是没有一个清晰地整体认识就盲目去做的后果吧。\n技术更迭迅速、敏捷开发一直是前端行业的特点，选择什么技术栈、去学习新的技术栈还是用已有的去做永远是需要权衡的问题。经过这个寒假自己开发过程中总结的经验教训，我也有了更深刻的体会。总结下来，减少纠结、清晰了解、抓紧去干才是硬道理，而技术栈的选择永远不是最重要的，至少，在选择中一味纠结是贻害无穷的。\n因此，当这一次我决定开始搭自己的博客网站也比较坚定地打消了之前的迷茫，放弃了纯自己手搓来练手炫技（装*）那种费时的方案（后续写portfolio可能会手搓），而是选择了用现成的工具、模板来快速搭建，更注重写博客本身对我个人反思总结以及提升的意义。我暂窃以为这才不是舍本逐末、买椟还珠，而是契合初衷的正确选择。\n这个学期课程要少很多（由于给100意愿值的sb劳动2离谱地掉了！！！），也正是提升自我的好时机，与wzy学长交流之后感觉收获颇丰，也又一次对未来发展包括求职有了更深的理解。希望能把握机会积极去实践，享受勇敢去做的快感。也希望我能把博客坚持运营下去，帮助自己和更多的人，一同成长，一同进步。\n愿我将来如果失去动力、感到迷茫时，看到这篇感悟、看到那个热血沸腾的自己，能振奋起来，重拾信心，继续前行！\n","slug":"初创博客所感","date":"2025-03-06T12:08:21.000Z","categories_index":"生活","tags_index":"随笔","author_index":"Proselyte"},{"id":"5bc5ed974c3e283a48cd798b95da315a","title":"学习资源推荐","content":"一、网站1.工具\nPPT模板素材 第一PPT\n图标素材 阿里iconfont\nreadme中文模板 shaojintian/Best_README_template\n免费高质量图片素材 pixabay\n免费UI组件库 antd\n强大的免费PDF操作工具 ilovepdf\n页面制作灵感 awwwards\n免费电子书平台 z-library\nlatex线上编辑器 overleaf\n强大的免费GIF操作工具 ezgif\n3D模型素材 sketchfab\n免费音频素材 freesound\n免费字体素材 dafont\n免费音效素材 freesound\n免费视频图片素材 pexels\n\n2.学习\n编程学习 菜鸟教程\nAI提示词训练 阿里AI提示词训练\nWEB文档 mdn\n\n3.前端库\n3D效果 three.js\n动画 motion.js\n邮箱 emailjs\n地图 React Simple Maps\n富文本编辑器 Quill\n2D效果 pixi.js\n图表 chart.js\n截图 html2canvas\n二维码 qrcode.js\n打字机效果 typewriterjs ityped\n\n二、视频\n互联网岗位介绍 【2024最新】互联网岗位介绍及其建议分析 码路漫漫谈(B站)\nJavaScript高级教程 coderwhy最强JavaScript高级教程 coderwhy官方账号(B站)\n进制转换 【最强干货】详解二进制，八进制，十进制，十六进制的相互转换 我是2045(B站)\nvscode中配置c/c++ vscode安装配置c/c++教程vscode安装使用教程 改BUG的TOM学长(B站)\n动画阐释各种排序算法 动画阐释各种排序算法（之前误删了大家也不用再点赞投币了）说数人V(B站)\nPPT教程 PPT教程 | PPT高手之路，零基础做出高逼格PPT，免费PPT设计制作技巧教学！OFFICE/WPS/演示/幻灯片/PPT模板/keynote/汇报/总结 珞珈PPT(B站)\n\n三、博主\n前端项目实战 Lama Dev(油管)\n100s技术快闪 Fireship(油管)\n像素画制作 AdamCYounis(油管)\nUI设计 Flux Academy(油管) UXTools(油管)\n编程教程 Web Dev Simplified(油管) Net Ninja(油管) Programming with Mosh(油管)\nCSS技巧 Lun Dev(油管)\n\n","slug":"学习资源推荐","date":"2025-03-06T02:00:27.000Z","categories_index":"工作","tags_index":"技术,推荐","author_index":"Proselyte"},{"id":"b9663f58f18133b35bfe243f3e916a80","title":"Hello World","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post1$ hexo new \"My New Post\"\n\nMore info: Writing\nRun server1$ hexo server\n\nMore info: Server\nGenerate static files1$ hexo generate\n\nMore info: Generating\nDeploy to remote sites1$ hexo deploy\n\nMore info: Deployment\n","slug":"hello-world","date":"2025-03-05T13:23:50.933Z","categories_index":"工作","tags_index":"技术,Hexo","author_index":"Proselyte"}]